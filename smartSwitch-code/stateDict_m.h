//
// Generated file, do not edit! Created by opp_msgtool 6.0 from inet/smart/stateDict.msg.
//

#ifndef __INET_STATEDICT_M_H
#define __INET_STATEDICT_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// opp_msgtool version check
#define MSGC_VERSION 0x0600
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgtool: 'make clean' should help.
#endif

// dll export symbol
#ifndef INET_API
#  if defined(INET_EXPORT)
#    define INET_API  OPP_DLLEXPORT
#  elif defined(INET_IMPORT)
#    define INET_API  OPP_DLLIMPORT
#  else
#    define INET_API
#  endif
#endif


namespace inet {

class StateDict;

}  // namespace inet


namespace inet {

// cplusplus {{
    #include <vector>
    #include <map>
    #include <string>
    
    typedef std::vector<std::pair<std::string, std::vector<double>>> stateDic;
    typedef std::string regString;
// }}

/**
 * Class generated from <tt>inet/smart/stateDict.msg:14</tt> by opp_msgtool.
 * <pre>
 * message StateDict extends cMessage
 * {
 *     stateDic dict;
 *     regString src;
 * }
 * </pre>
 */
class INET_API StateDict : public ::omnetpp::cMessage
{
  protected:
    stateDic dict;
    regString src;

  private:
    void copy(const StateDict& other);

  protected:
    bool operator==(const StateDict&) = delete;

  public:
    StateDict(const char *name=nullptr, short kind=0);
    StateDict(const StateDict& other);
    virtual ~StateDict();
    StateDict& operator=(const StateDict& other);
    virtual StateDict *dup() const override {return new StateDict(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual const stateDic& getDict() const;
    virtual stateDic& getDictForUpdate() { return const_cast<stateDic&>(const_cast<StateDict*>(this)->getDict());}
    virtual void setDict(const stateDic& dict);

    virtual const regString& getSrc() const;
    virtual regString& getSrcForUpdate() { return const_cast<regString&>(const_cast<StateDict*>(this)->getSrc());}
    virtual void setSrc(const regString& src);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const StateDict& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, StateDict& obj) {obj.parsimUnpack(b);}


}  // namespace inet


namespace omnetpp {

inline any_ptr toAnyPtr(const inet::stateDic *p) {if (auto obj = as_cObject(p)) return any_ptr(obj); else return any_ptr(p);}
template<> inline inet::stateDic *fromAnyPtr(any_ptr ptr) { return ptr.get<inet::stateDic>(); }
inline any_ptr toAnyPtr(const inet::regString *p) {if (auto obj = as_cObject(p)) return any_ptr(obj); else return any_ptr(p);}
template<> inline inet::regString *fromAnyPtr(any_ptr ptr) { return ptr.get<inet::regString>(); }
template<> inline inet::StateDict *fromAnyPtr(any_ptr ptr) { return check_and_cast<inet::StateDict*>(ptr.get<cObject>()); }

}  // namespace omnetpp

#endif // ifndef __INET_STATEDICT_M_H

